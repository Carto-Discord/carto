{
  "Comment": "State Machine to traverse the Slash Command tree and execute the desired action",
  "StartAt": "Determine Command",
  "States": {
    "Determine Command": {
      "Comment": "The top level Command comes directly after the slash, e.g. /map or /token",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.command",
          "StringEquals": "map",
          "Next": "Map"
        },
        {
          "Variable": "$.command",
          "StringEquals": "token",
          "Next": "Token"
        }
      ],
      "Default": "Failure"
    },
    "Map": {
      "Comment": "The Subcommand comes after the top level Command, and may include parameters, e.g. /map create url: https://image.com/img.png rows: 10 columns: 10",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.subCommand",
          "StringEquals": "get",
          "Next": "GetMap"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "delete",
          "Next": "DeleteMap"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "create",
          "Next": "CreateMap"
        }
      ],
      "Default": "Failure"
    },
    "Token": {
      "Comment": "The Subcommand comes after the top level Command, and may include parameters, e.g. /token add name: Doug row: 7 column: T",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.subCommand",
          "StringEquals": "add",
          "Next": "AddToken"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "move",
          "Next": "MoveToken"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "delete",
          "Next": "DeleteToken"
        }
      ],
      "Default": "Failure"
    },
    "GetMap": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "channel_id.$": "$.channel_id"
      },
      "Resource": "${getMapLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "DeleteMap": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "channel_id.$": "$.channel_id"
      },
      "Resource": "${deleteMapLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "CreateMap": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "channel_id.$": "$.channel_id",
        "url.$": "$.url",
        "rows.$": "$.rows",
        "columns.$": "$.columns"
      },
      "Resource": "${createMapLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "AddToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${addTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "MoveToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${moveDeleteTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "DeleteToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${moveDeleteTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "SendResponse": {
      "Type": "Task",
      "InputPath": "$.embed",
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "SendFailure": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "error.$": "$.error"
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "Failure": {
      "Type": "Fail",
      "Cause": "An invalid command was entered"
    }
  }
}
