{
  "Comment": "State Machine to traverse the Slash Command tree and execute the desired action",
  "StartAt": "Determine Command",
  "States": {
    "Determine Command": {
      "Comment": "The top level Command comes directly after the slash, e.g. /map or /token",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.command",
          "StringEquals": "map",
          "Next": "Map"
        },
        {
          "Variable": "$.command",
          "StringEquals": "token",
          "Next": "Token"
        }
      ],
      "Default": "Failure"
    },
    "Map": {
      "Comment": "The Subcommand comes after the top level Command, and may include parameters, e.g. /map create url: https://image.com/img.png rows: 10 columns: 10",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.subCommand",
          "StringEquals": "get",
          "Next": "GetMap_GetChannel"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "delete",
          "Next": "DeleteMap_PerformDelete"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "create",
          "Next": "CreateMap"
        }
      ],
      "Default": "Failure"
    },
    "Token": {
      "Comment": "The Subcommand comes after the top level Command, and may include parameters, e.g. /token add name: Doug row: 7 column: T",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.subCommand",
          "StringEquals": "add",
          "Next": "AddToken"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "move",
          "Next": "MoveToken"
        },
        {
          "Variable": "$.subCommand",
          "StringEquals": "delete",
          "Next": "DeleteToken"
        }
      ],
      "Default": "Failure"
    },
    "GetMap_GetChannel": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${channelTable}",
        "Key": {
          "id": {
            "S.$": "$.channel_id"
          }
        }
      },
      "Next": "GetMap_HasChannel",
      "ResultPath": "$.channel"
    },
    "GetMap_HasChannel": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.channel.Item",
          "IsPresent": true,
          "Next": "GetMap_GetMap"
        }
      ],
      "Default": "HasChannel_ConstructError"
    },
    "HasChannel_ConstructError": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "embed": {
          "title": "Error retrieving map",
          "description": "This channel has no map associated with it",
          "type": "rich"
        }
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "GetMap_GetMap": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${mapTable}",
        "Key": {
          "id": {
            "S.$": "$.currentMap.S"
          }
        }
      },
      "InputPath": "$.channel.Item",
      "ResultPath": "$.map",
      "Next": "GetMap_HasMap"
    },
    "GetMap_HasMap": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.map.Item",
          "IsPresent": true,
          "Next": "GetMap_ConstructResponse"
        }
      ],
      "Default": "HasMap_ConstructError"
    },
    "HasMap_ConstructError": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "embed": {
          "title": "Error retrieving map",
          "description": "Map data for this channel is incomplete\nFor help, refer to the [troubleshooting](https://carto-discord.github.io/carto/troubleshooting) page.",
          "type": "rich"
        }
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "GetMap_ConstructResponse": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "channel.$": "$.channel",
        "map.$": "$.map",
        "token.$": "$.token"
      },
      "Resource": "${getMapLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "DeleteMap_PerformDelete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:deleteItem",
      "Parameters": {
        "TableName": "${channelTable}",
        "Key": {
          "id": {
            "S": "$.channel_id"
          }
        }
      },
      "ResultPath": "$.dynamodb",
      "Next": "DeleteMap_SendResponse",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "DeleteMap_SendFailure"
        }
      ]
    },
    "DeleteMap_SendResponse": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "embed": {
          "title": "Channel data deleted",
          "description": "All related maps will be erased from Carto within 24 hours",
          "type": "rich"
        }
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "DeleteMap_SendFailure": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "embed": {
          "title": "Deletion error",
          "description": "Data couldn't be deleted, likely because it never existed",
          "type": "rich"
        }
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },

    "CreateMap": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "channel_id.$": "$.channel_id",
        "url.$": "$.url",
        "rows.$": "$.rows",
        "columns.$": "$.columns"
      },
      "Resource": "${createMapLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "AddToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${addTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "MoveToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${moveDeleteTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "DeleteToken": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${moveDeleteTokenLambdaArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SendFailure",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "embed.$": "States.StringToJson($.body)"
      },
      "Next": "SendResponse"
    },
    "SendResponse": {
      "Type": "Task",
      "InputPath": "$.embed",
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "SendFailure": {
      "Type": "Task",
      "Parameters": {
        "application_id.$": "$.application_id",
        "token.$": "$.token",
        "error.$": "$.error"
      },
      "Resource": "${sendResponseLambdaArn}",
      "End": true
    },
    "Failure": {
      "Type": "Fail",
      "Cause": "An invalid command was entered"
    }
  }
}
